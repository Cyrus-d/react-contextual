// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async action 1`] = `
<Provider
  actions={
    Object {
      "async": [Function],
      "functional": [Function],
      "simple": [Function],
    }
  }
  extra={100}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 0,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "async": [Function],
                "functional": [Function],
                "simple": [Function],
              }
            }
            count={0}
            extra={100}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`async action 2`] = `
<Provider
  actions={
    Object {
      "async": [Function],
      "functional": [Function],
      "simple": [Function],
    }
  }
  extra={100}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 1,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "async": [Function],
                "functional": [Function],
                "simple": [Function],
              }
            }
            count={1}
            extra={100}
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`await actions & access state 1`] = `
<Provider
  actions={
    Object {
      "async": [Function],
      "functional": [Function],
      "simple": [Function],
    }
  }
  extra={100}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 0,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <_class2
            actions={
              Object {
                "async": [Function],
                "functional": [Function],
                "simple": [Function],
              }
            }
            count={0}
            extra={100}
          >
            <div>
              0
              <button
                onClick={[Function]}
              />
            </div>
          </_class2>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`await actions & access state 2`] = `
<Provider
  actions={
    Object {
      "async": [Function],
      "functional": [Function],
      "simple": [Function],
    }
  }
  extra={100}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 4,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <_class2
            actions={
              Object {
                "async": [Function],
                "functional": [Function],
                "simple": [Function],
              }
            }
            count={4}
            extra={100}
          >
            <div>
              4
              <button
                onClick={[Function]}
              />
            </div>
          </_class2>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`external store 1`] = `
<Provider
  store={
    Object {
      "actions": Object {
        "async": [Function],
        "functional": [Function],
        "simple": [Function],
      },
      "context": Object {
        "Consumer": [Function],
        "Provider": [Function],
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "externalTest",
      "initialState": Object {
        "count": 0,
      },
      "props": Object {
        "extra": 100,
      },
      "state": Object {
        "count": 0,
      },
      "subscribe": [Function],
      "subscriptions": Set {},
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 0,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            count={0}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`external store 2`] = `
<Provider
  store={
    Object {
      "actions": Object {
        "async": [Function],
        "functional": [Function],
        "simple": [Function],
      },
      "context": Object {
        "Consumer": [Function],
        "Provider": [Function],
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "externalTest",
      "initialState": Object {
        "count": 0,
      },
      "props": Object {
        "extra": 100,
      },
      "state": Object {
        "count": 2,
      },
      "subscribe": [Function],
      "subscriptions": Set {},
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 2,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            count={2}
          >
            <button
              onClick={[Function]}
            >
              2
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`external store, setState 1`] = `
<Provider
  store={
    Object {
      "actions": Object {
        "setState": [Function],
      },
      "context": Object {
        "Consumer": [Function],
        "Provider": [Function],
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "externalTest2",
      "initialState": Object {
        "count": 0,
      },
      "props": Object {},
      "state": Object {
        "count": 0,
      },
      "subscribe": [Function],
      "subscriptions": Set {},
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "count": 0,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            count={0}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`external store, setState 2`] = `
<Provider
  store={
    Object {
      "actions": Object {
        "setState": [Function],
      },
      "context": Object {
        "Consumer": [Function],
        "Provider": [Function],
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "externalTest2",
      "initialState": Object {
        "count": 0,
      },
      "props": Object {},
      "state": Object {
        "count": 1,
      },
      "subscribe": [Function],
      "subscriptions": Set {},
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "count": 1,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            count={1}
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`extras 1`] = `
<Provider
  actions={
    Object {
      "async": [Function],
      "functional": [Function],
      "simple": [Function],
    }
  }
  extra={100}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 0,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <Provider
        store={
          Object {
            "actions": Object {
              "setState": [Function],
            },
            "context": Object {
              "Consumer": [Function],
              "Provider": [Function],
            },
            "destroy": [Function],
            "getState": [Function],
            "id": "externalTest3",
            "initialState": Object {
              "count": 5,
            },
            "props": Object {
              "extra": 1000,
            },
            "state": Object {
              "count": 5,
            },
            "subscribe": [Function],
            "subscriptions": Set {},
          }
        }
      >
        <Provider
          value={
            Object {
              "actions": Object {
                "setState": [Function],
              },
              "count": 5,
              "extra": 1000,
            }
          }
        >
          <RenderPure>
            <SubscribeWrap>
              <Consumer
                quiet={false}
              >
                <Consumer
                  quiet={false}
                >
                  <Component
                    a={
                      Object {
                        "actions": Object {
                          "async": [Function],
                          "functional": [Function],
                          "simple": [Function],
                        },
                        "count": 0,
                        "extra": 100,
                      }
                    }
                    b={
                      Object {
                        "actions": Object {
                          "setState": [Function],
                        },
                        "count": 5,
                        "extra": 1000,
                      }
                    }
                  >
                    1105
                  </Component>
                </Consumer>
              </Consumer>
            </SubscribeWrap>
          </RenderPure>
        </Provider>
      </Provider>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`functional action 1`] = `
<Provider
  actions={
    Object {
      "async": [Function],
      "functional": [Function],
      "simple": [Function],
    }
  }
  extra={100}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 0,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "async": [Function],
                "functional": [Function],
                "simple": [Function],
              }
            }
            count={0}
            extra={100}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`functional action 2`] = `
<Provider
  actions={
    Object {
      "async": [Function],
      "functional": [Function],
      "simple": [Function],
    }
  }
  extra={100}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 1,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "async": [Function],
                "functional": [Function],
                "simple": [Function],
              }
            }
            count={1}
            extra={100}
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`mount/unmount 1`] = `<App />`;

exports[`no actions 1`] = `
<Provider
  actions={null}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "count": 0,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            count={0}
          >
            0
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`no actions, setState 1`] = `
<Provider
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "count": 0,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            count={0}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`no actions, setState 2`] = `
<Provider
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "count": 1,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            count={1}
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`renders properly 1`] = `
<Provider
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "count": 0,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            count={0}
          >
            0
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`simple action 1`] = `
<Provider
  actions={
    Object {
      "async": [Function],
      "functional": [Function],
      "simple": [Function],
    }
  }
  extra={100}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 0,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "async": [Function],
                "functional": [Function],
                "simple": [Function],
              }
            }
            count={0}
            extra={100}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`simple action 2`] = `
<Provider
  actions={
    Object {
      "async": [Function],
      "functional": [Function],
      "simple": [Function],
    }
  }
  extra={100}
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "async": [Function],
          "functional": [Function],
          "simple": [Function],
        },
        "count": 1,
        "extra": 100,
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "async": [Function],
                "functional": [Function],
                "simple": [Function],
              }
            }
            count={1}
            extra={100}
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </SubscribeWrap>
    </RenderPure>
  </Provider>
</Provider>
`;
