// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`subscribe("key") 1`] = `
<Provider
  id="key"
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap
        id="key"
      >
        <Consumer
          quiet={false}
        >
          <Component
            id="key"
            state={
              Object {
                "actions": Object {
                  "setState": [Function],
                },
                "message": "success!",
              }
            }
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        id="key"
        select="state"
        to="key"
      >
        <SubscribeWrap
          id="key"
        >
          <Consumer
            quiet={false}
          >
            <Component
              id="key"
              state={
                Object {
                  "actions": Object {
                    "setState": [Function],
                  },
                  "message": "success!",
                }
              }
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe("key", "state") 1`] = `
<Provider
  id="key"
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap
        id="key"
      >
        <Consumer
          quiet={false}
        >
          <Component
            id="key"
            state={
              Object {
                "actions": Object {
                  "setState": [Function],
                },
                "message": "success!",
              }
            }
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        id="key"
        select="state"
        to="key"
      >
        <SubscribeWrap
          id="key"
        >
          <Consumer
            quiet={false}
          >
            <Component
              id="key"
              state={
                Object {
                  "actions": Object {
                    "setState": [Function],
                  },
                  "message": "success!",
                }
              }
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe("key", store => store) 1`] = `
<Provider
  id="key"
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap
        id="key"
      >
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            id="key"
            message="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        id="key"
        select={[Function]}
        to="key"
      >
        <SubscribeWrap
          id="key"
        >
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "setState": [Function],
                }
              }
              id="key"
              message="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe("state") 1`] = `
<Provider
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            state={
              Object {
                "actions": Object {
                  "setState": [Function],
                },
                "message": "success!",
              }
            }
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select="state"
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              state={
                Object {
                  "actions": Object {
                    "setState": [Function],
                  },
                  "message": "success!",
                }
              }
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe() 1`] = `
<Provider
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            message="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "setState": [Function],
                }
              }
              message="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(AnyContext, "context") 1`] = `
<ModuleContext>
  <Component
    context={
      Object {
        "Consumer": [Function],
        "Provider": [Function],
      }
    }
  >
    <Provider
      value={
        Object {
          "context": "success!",
        }
      }
    >
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            context={
              Object {
                "context": "success!",
              }
            }
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select="context"
        to={[Function]}
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              context={
                Object {
                  "context": "success!",
                }
              }
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </Provider>
  </Component>
</ModuleContext>
`;

exports[`subscribe(AnyContext, context => context) 1`] = `
<ModuleContext>
  <Component
    context={
      Object {
        "Consumer": [Function],
        "Provider": [Function],
      }
    }
  >
    <Provider
      value={
        Object {
          "context": "success!",
        }
      }
    >
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            context="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select={[Function]}
        to={[Function]}
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              context="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </Provider>
  </Component>
</ModuleContext>
`;

exports[`subscribe(AnyContextObjectValue) 1`] = `
<ModuleContext>
  <Component
    context={
      Object {
        "Consumer": [Function],
        "Provider": [Function],
      }
    }
  >
    <Provider
      value={
        Object {
          "context": "success!",
        }
      }
    >
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            context="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select={[Function]}
        to={[Function]}
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              context="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </Provider>
  </Component>
</ModuleContext>
`;

exports[`subscribe(AnyContextSingleValue) 1`] = `
<ModuleContext>
  <Component
    context={
      Object {
        "Consumer": [Function],
        "Provider": [Function],
      }
    }
  >
    <Provider
      value="success"
    >
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            context="success"
          >
            success
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select={[Function]}
        to={[Function]}
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              context="success"
            >
              success
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </Provider>
  </Component>
</ModuleContext>
`;

exports[`subscribe(ProviderContext) 1`] = `
<Provider
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            message="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "setState": [Function],
                }
              }
              message="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(ProviderContext, "state") 1`] = `
<Provider
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            state={
              Object {
                "actions": Object {
                  "setState": [Function],
                },
                "message": "success!",
              }
            }
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select="state"
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              state={
                Object {
                  "actions": Object {
                    "setState": [Function],
                  },
                  "message": "success!",
                }
              }
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(ProviderContext, context => context) 1`] = `
<Provider
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            message="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "setState": [Function],
                }
              }
              message="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(props => props.id) 1`] = `
<Provider
  id="key"
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap
        id="key"
      >
        <Consumer
          quiet={false}
        >
          <Component
            id="key"
            state={
              Object {
                "actions": Object {
                  "setState": [Function],
                },
                "message": "success!",
              }
            }
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        id="key"
        select="state"
        to={[Function]}
      >
        <SubscribeWrap
          id="key"
        >
          <Consumer
            quiet={false}
          >
            <Component
              id="key"
              state={
                Object {
                  "actions": Object {
                    "setState": [Function],
                  },
                  "message": "success!",
                }
              }
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(props => props.id, "state") 1`] = `
<Provider
  id="key"
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap
        id="key"
      >
        <Consumer
          quiet={false}
        >
          <Component
            id="key"
            state={
              Object {
                "actions": Object {
                  "setState": [Function],
                },
                "message": "success!",
              }
            }
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        id="key"
        select="state"
        to={[Function]}
      >
        <SubscribeWrap
          id="key"
        >
          <Consumer
            quiet={false}
          >
            <Component
              id="key"
              state={
                Object {
                  "actions": Object {
                    "setState": [Function],
                  },
                  "message": "success!",
                }
              }
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(props => props.id, store => store) 1`] = `
<Provider
  id="key"
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap
        id="key"
      >
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            id="key"
            message="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        id="key"
        select={[Function]}
        to={[Function]}
      >
        <SubscribeWrap
          id="key"
        >
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "setState": [Function],
                }
              }
              id="key"
              message="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(store => store) 1`] = `
<Provider
  initialState={
    Object {
      "message": "success!",
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            message="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "setState": [Function],
                }
              }
              message="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(store) 1`] = `
<Provider
  initialState={
    Object {
      "message": "success!",
    }
  }
  store={
    Object {
      "actions": Object {
        "setState": [Function],
      },
      "context": Object {
        "Consumer": [Function],
        "Provider": [Function],
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "testStore",
      "initialState": Object {
        "message": "success!",
      },
      "props": Object {},
      "state": Object {
        "message": "success!",
      },
      "subscribe": [Function],
      "subscriptions": Set {},
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            message="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "actions": Object {
              "setState": [Function],
            },
            "context": Object {
              "Consumer": [Function],
              "Provider": [Function],
            },
            "destroy": [Function],
            "getState": [Function],
            "id": "testStore",
            "initialState": Object {
              "message": "success!",
            },
            "props": Object {},
            "state": Object {
              "message": "success!",
            },
            "subscribe": [Function],
            "subscriptions": Set {},
          }
        }
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "setState": [Function],
                }
              }
              message="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(store, "state") 1`] = `
<Provider
  initialState={
    Object {
      "message": "success!",
    }
  }
  store={
    Object {
      "actions": Object {
        "setState": [Function],
      },
      "context": Object {
        "Consumer": [Function],
        "Provider": [Function],
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "testStore",
      "initialState": Object {
        "message": "success!",
      },
      "props": Object {},
      "state": Object {
        "message": "success!",
      },
      "subscribe": [Function],
      "subscriptions": Set {},
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            state={
              Object {
                "actions": Object {
                  "setState": [Function],
                },
                "message": "success!",
              }
            }
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select="state"
        to={
          Object {
            "actions": Object {
              "setState": [Function],
            },
            "context": Object {
              "Consumer": [Function],
              "Provider": [Function],
            },
            "destroy": [Function],
            "getState": [Function],
            "id": "testStore",
            "initialState": Object {
              "message": "success!",
            },
            "props": Object {},
            "state": Object {
              "message": "success!",
            },
            "subscribe": [Function],
            "subscriptions": Set {},
          }
        }
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              state={
                Object {
                  "actions": Object {
                    "setState": [Function],
                  },
                  "message": "success!",
                }
              }
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(store, context => context) 1`] = `
<Provider
  initialState={
    Object {
      "message": "success!",
    }
  }
  store={
    Object {
      "actions": Object {
        "setState": [Function],
      },
      "context": Object {
        "Consumer": [Function],
        "Provider": [Function],
      },
      "destroy": [Function],
      "getState": [Function],
      "id": "testStore",
      "initialState": Object {
        "message": "success!",
      },
      "props": Object {},
      "state": Object {
        "message": "success!",
      },
      "subscribe": [Function],
      "subscriptions": Set {},
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "setState": [Function],
        },
        "message": "success!",
      }
    }
  >
    <RenderPure>
      <SubscribeWrap>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "setState": [Function],
              }
            }
            message="success!"
          >
            success!
          </Component>
        </Consumer>
      </SubscribeWrap>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "actions": Object {
              "setState": [Function],
            },
            "context": Object {
              "Consumer": [Function],
              "Provider": [Function],
            },
            "destroy": [Function],
            "getState": [Function],
            "id": "testStore",
            "initialState": Object {
              "message": "success!",
            },
            "props": Object {},
            "state": Object {
              "message": "success!",
            },
            "subscribe": [Function],
            "subscriptions": Set {},
          }
        }
      >
        <SubscribeWrap>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "setState": [Function],
                }
              }
              message="success!"
            >
              success!
            </Component>
          </Consumer>
        </SubscribeWrap>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;
