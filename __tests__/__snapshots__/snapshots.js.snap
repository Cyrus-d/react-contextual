// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`subscribe() 1`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 0,
      }
    }
  >
    <RenderPure>
      <Component>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={0}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={0}
            >
              0
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe() 2`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 1,
      }
    }
  >
    <RenderPure>
      <Component>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={1}
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={1}
            >
              1
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe([a,b], (a,b) => props) 1`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  id="id1"
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 0,
      }
    }
  >
    <RenderPure>
      <Provider
        actions={
          Object {
            "up": [Function],
          }
        }
        id="id2"
        initialState={
          Object {
            "count": 0,
          }
        }
      >
        <Provider
          value={
            Object {
              "actions": Object {
                "up": [Function],
              },
              "count": 0,
            }
          }
        >
          <RenderPure>
            <Component>
              <Consumer
                quiet={false}
              >
                <Consumer
                  quiet={false}
                >
                  <Component
                    store1={
                      Object {
                        "actions": Object {
                          "up": [Function],
                        },
                        "count": 0,
                      }
                    }
                    store2={
                      Object {
                        "actions": Object {
                          "up": [Function],
                        },
                        "count": 0,
                      }
                    }
                  >
                    <button
                      onClick={[Function]}
                    >
                      0
                       
                      0
                    </button>
                  </Component>
                </Consumer>
              </Consumer>
            </Component>
            <Subscribe
              select={[Function]}
              to={
                Array [
                  "id1",
                  "id2",
                ]
              }
            >
              <Component>
                <Consumer
                  quiet={false}
                >
                  <Consumer
                    quiet={false}
                  >
                    <Component
                      store1={
                        Object {
                          "actions": Object {
                            "up": [Function],
                          },
                          "count": 0,
                        }
                      }
                      store2={
                        Object {
                          "actions": Object {
                            "up": [Function],
                          },
                          "count": 0,
                        }
                      }
                    >
                      0 0
                    </Component>
                  </Consumer>
                </Consumer>
              </Component>
            </Subscribe>
          </RenderPure>
        </Provider>
      </Provider>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe([a,b], (a,b) => props) 2`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  id="id1"
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 1,
      }
    }
  >
    <RenderPure>
      <Provider
        actions={
          Object {
            "up": [Function],
          }
        }
        id="id2"
        initialState={
          Object {
            "count": 0,
          }
        }
      >
        <Provider
          value={
            Object {
              "actions": Object {
                "up": [Function],
              },
              "count": 1,
            }
          }
        >
          <RenderPure>
            <Component>
              <Consumer
                quiet={false}
              >
                <Consumer
                  quiet={false}
                >
                  <Component
                    store1={
                      Object {
                        "actions": Object {
                          "up": [Function],
                        },
                        "count": 1,
                      }
                    }
                    store2={
                      Object {
                        "actions": Object {
                          "up": [Function],
                        },
                        "count": 1,
                      }
                    }
                  >
                    <button
                      onClick={[Function]}
                    >
                      1
                       
                      1
                    </button>
                  </Component>
                </Consumer>
              </Consumer>
            </Component>
            <Subscribe
              select={[Function]}
              to={
                Array [
                  "id1",
                  "id2",
                ]
              }
            >
              <Component>
                <Consumer
                  quiet={false}
                >
                  <Consumer
                    quiet={false}
                  >
                    <Component
                      store1={
                        Object {
                          "actions": Object {
                            "up": [Function],
                          },
                          "count": 1,
                        }
                      }
                      store2={
                        Object {
                          "actions": Object {
                            "up": [Function],
                          },
                          "count": 1,
                        }
                      }
                    >
                      1 1
                    </Component>
                  </Consumer>
                </Consumer>
              </Component>
            </Subscribe>
          </RenderPure>
        </Provider>
      </Provider>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(Context, props => props) 1`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 0,
      }
    }
  >
    <RenderPure>
      <Component>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={0}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={0}
            >
              0
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(Context, props => props) 2`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 1,
      }
    }
  >
    <RenderPure>
      <Component>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={1}
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={1}
            >
              1
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(id, props => props) 1`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  id="id"
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 0,
      }
    }
  >
    <RenderPure>
      <Component>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={0}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to="id"
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={0}
            >
              0
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(id, props => props) 2`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  id="id"
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 1,
      }
    }
  >
    <RenderPure>
      <Component>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={1}
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to="id"
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={1}
            >
              1
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(props => props) 1`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 0,
      }
    }
  >
    <RenderPure>
      <Component>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={0}
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={0}
            >
              0
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(props => props) 2`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 1,
      }
    }
  >
    <RenderPure>
      <Component>
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={1}
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to={
          Object {
            "Consumer": [Function],
            "Provider": [Function],
          }
        }
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={1}
            >
              1
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(props => props.id, props => props) 1`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  id="id"
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 0,
      }
    }
  >
    <RenderPure>
      <Component
        id="id"
      >
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={0}
            id="id"
          >
            <button
              onClick={[Function]}
            >
              0
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to="id"
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={0}
            >
              0
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;

exports[`subscribe(props => props.id, props => props) 2`] = `
<Provider
  actions={
    Object {
      "up": [Function],
    }
  }
  id="id"
  initialState={
    Object {
      "count": 0,
    }
  }
>
  <Provider
    value={
      Object {
        "actions": Object {
          "up": [Function],
        },
        "count": 1,
      }
    }
  >
    <RenderPure>
      <Component
        id="id"
      >
        <Consumer
          quiet={false}
        >
          <Component
            actions={
              Object {
                "up": [Function],
              }
            }
            count={1}
            id="id"
          >
            <button
              onClick={[Function]}
            >
              1
            </button>
          </Component>
        </Consumer>
      </Component>
      <Subscribe
        select={[Function]}
        to="id"
      >
        <Component>
          <Consumer
            quiet={false}
          >
            <Component
              actions={
                Object {
                  "up": [Function],
                }
              }
              count={1}
            >
              1
            </Component>
          </Consumer>
        </Component>
      </Subscribe>
    </RenderPure>
  </Provider>
</Provider>
`;
